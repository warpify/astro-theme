---
/**
 * Go to top with scroll bar
 * usage: insert the tag <GoTopWithProgress /> in the body tag
 * props:
 * 	- offset: number, scroll after the progress bar appear
 * 	- scrollSpeed: speed to scroll up
 * 	- color: color of the progress bar
 */

interface Props {
	offset?: number;
	scrollSpeed?: number;
	color?: string;
}

// https://github.com/snowpackjs/astro/issues/1107
const { offset = 500, scrollSpeed = 2, color } = Astro.props as props;
---

<div class="progress-wrap button-up">
	<svg class="progress-circle svg-content" width="100%" height="100%" viewBox="-1 -1 102 102">
		<path d="M50,1 a49,49 0 0,1 0,98 a49,49 0 0,1 0,-98"></path>
	</svg>
	<i class="arrow-up"></i>
</div>

<script define:vars={{ offset, scrollSpeed }}>
	//Scroll back to top

	window.onload = function () {
		var progressWrap = document.querySelector(".progress-wrap");
		var progressPath = progressWrap.querySelector("path");

		var pathLength = progressPath.getTotalLength();
		progressPath.style.transition = progressPath.style.WebkitTransition = "none";
		progressPath.style.strokeDasharray = pathLength + " " + pathLength;
		progressPath.style.strokeDashoffset = pathLength;
		progressPath.getBoundingClientRect();
		progressPath.style.transition = progressPath.style.WebkitTransition = "stroke-dashoffset 10ms linear";

		var updateProgress = function () {
			var scroll = window.pageYOffset; //$(window).scrollTop();
			var height = document.body.scrollHeight - window.screen.height; // $(document).height() - $(window).height();
			var progress = pathLength - (scroll * pathLength) / height;

			if (progress <= 0) {
				progress = 0;
			}

			progressPath.style.strokeDashoffset = progress;
		};

		updateProgress();
		document.addEventListener("scroll", updateProgress, false); //$(window).scroll(updateProgress);

		// When scroll change, add class on (header) (the scroll effect of header)
		window.addEventListener("scroll", function (e) {
			if (this.scrollY > offset) {
				progressWrap.classList.add("active-progress");
			} else {
				progressWrap.classList.remove("active-progress");
			}
		});

		function scrollToTop(scrollSpeed) {
			debugger;
			// cancel if already on top
			if (document.scrollingElement.scrollTop === 0) return;

			const cosParameter = document.scrollingElement.scrollTop / 2;
			let scrollCount = 0,
				oldTimestamp = null;

			function step(newTimestamp) {
				if (oldTimestamp !== null) {
					scrollCount += (Math.PI * (newTimestamp - oldTimestamp)) / scrollSpeed;
					if (scrollCount >= Math.PI) return (document.scrollingElement.scrollTop = 0);
					document.scrollingElement.scrollTop = cosParameter + cosParameter * Math.cos(scrollCount);
				}
				oldTimestamp = newTimestamp;
				window.requestAnimationFrame(step);
			}
			window.requestAnimationFrame(step);
		}

		progressWrap.addEventListener("click", function (event) {
			event.preventDefault();
			scrollToTop(scrollSpeed);
			return false;
		});
	};
</script>

<style define:vars={{ color }}>
	/* #Progress
================================================== */
	.progress-wrap {
		color: var(--color);
		position: fixed;
		right: 30px;
		bottom: 30px;
		height: 46px;
		width: 46px;
		cursor: pointer;
		display: block;
		border-radius: 50px;
		box-shadow: inset 0 0 0 2px rgba(0, 0, 0, 10%);
		z-index: 10000;
		opacity: 0;
		visibility: hidden;
		transform: translateY(15px);
		-webkit-transition: all 200ms linear;
		transition: all 200ms linear;
	}
	.progress-wrap.active-progress {
		opacity: 1;
		visibility: visible;
		transform: translateY(0);
	}
	.progress-wrap svg path {
		fill: none;
	}
	.progress-wrap svg.progress-circle path {
		stroke: var(--color-primary);
		stroke-width: 4;
		box-sizing: border-box;
		-webkit-transition: all 200ms linear;
		transition: all 200ms linear;
	}

	.button-up:hover {
		transform: translate3d(0, -5px, 0);
	}

	.arrow-up {
		color: var(--color-primary);
		box-sizing: border-box;
		position: absolute;
		display: block;
		transform: scale(0.7);
		width: 22px;
		height: 22px;
		top: 13px;
		left: 13px;
	}
	.arrow-up::after,
	.arrow-up::before {
		content: "";
		display: block;
		box-sizing: border-box;
		position: absolute;
		top: 4px;
	}
	.arrow-up::after {
		width: 8px;
		height: 8px;
		border-top: 2px solid;
		border-left: 2px solid;
		transform: rotate(45deg);
		left: 7px;
	}
	.arrow-up::before {
		width: 2px;
		height: 16px;
		left: 10px;
		background: currentColor;
	}
</style>
